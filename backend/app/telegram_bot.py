import os
import logging
import asyncio
import socket
import requests
import threading
from pathlib import Path
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from app import create_app
from app.services.file_service import FileService
from dotenv import load_dotenv

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ======================
load_dotenv(Path(__file__).parent.parent / '.env')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8080/api')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None
bot_thread = None
event_loop = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask app context
flask_app = create_app()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================
def get_frontend_url():
    try:
        ip = socket.gethostbyname(socket.gethostname())
        return f"http://{ip}:{os.getenv('FRONTEND_PORT', '3000')}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {str(e)}")
        return "http://localhost:3000"

def ensure_flask_context(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        with flask_app.app_context():
            return await func(update, context)
    return wrapper

# ======================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# ======================
@ensure_flask_context
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    frontend_url = get_frontend_url()
    message = (
        "üåê *–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:*\n"
        f"[{frontend_url}]({frontend_url})\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/save —Ç–µ–∫—Å—Ç` - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ `/history` - –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

@ensure_flask_context
async def save_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save"""
    try:
        text = ' '.join(context.args)
        if not text:
            return await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        response = requests.post(
            f"{API_BASE_URL}/save_text",
            json={"text": text},
            timeout=10
        )
        
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@ensure_flask_context
async def get_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/history", timeout=5)
        if response.status_code != 200:
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

        history = response.json()
        if not history:
            return await update.message.reply_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

        for item in history:
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download:{item['filename']}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{item['filename']}")
                ],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy:{item['filename']}")]
            ])
            
            await update.message.reply_text(
                f"üìÑ *{item['filename']}*\n`{item['content']}`",
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"History error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@ensure_flask_context
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        file = await update.message.effective_attachment.get_file()
        filename = FileService.sanitize_filename(
            update.message.effective_attachment.file_name
        )
        
        file_bytes = await file.download_as_bytearray()
        
        response = requests.post(
            f"{API_BASE_URL}/files/upload",
            files={'file': (filename, file_bytes)},
            timeout=20
        )
        
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# ======================
@ensure_flask_context
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        action, filename = query.data.split(':')
        filename = FileService.sanitize_filename(filename)
        upload_folder = flask_app.config['UPLOAD_FOLDER']
        filepath = Path(upload_folder) / filename

        if action == 'download':
            if not filepath.exists():
                return await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            await query.message.reply_document(
                document=open(filepath, 'rb'),
                caption=f"üì• {filename}"
            )

        elif action == 'delete':
            response = requests.delete(f"{API_BASE_URL}/files/delete/{filename}")
            if response.status_code == 200:
                await query.message.edit_text(f"üóë –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}")
            else:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

        elif action == 'copy':
            response = requests.get(f"{API_BASE_URL}/files/content/{filename}")
            if response.status_code != 200:
                return await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            content = response.json().get('content', '')
            FileService.copy_to_clipboard(content)
            await query.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# ======================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú
# ======================
def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application, event_loop
    
    try:
        event_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(event_loop)
        
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("save", save_text_command),
            CommandHandler("history", get_history),
            MessageHandler(filters.Document.ALL, handle_file),
            CallbackQueryHandler(button_handler)
        ]
        
        application.add_handlers(handlers)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling(
            drop_pending_updates=True,
            close_loop=False
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        raise

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_thread
    
    try:
        if os.name == 'nt':
            asyncio.set_event_loop_policy(
                asyncio.WindowsSelectorEventLoopPolicy()
            )
            
        bot_thread = threading.Thread(
            target=run_bot,
            daemon=True,
            name="TelegramBot"
        )
        bot_thread.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        raise

def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global application, bot_thread
    
    try:
        if application:
            application.stop()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if bot_thread and bot_thread.is_alive():
            bot_thread.join(timeout=5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    start_bot()