import socket
import os
import asyncio
import logging
import requests
import re
from threading import Thread
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from dotenv import load_dotenv
from app import create_app
from functools import wraps
from flask import has_app_context, current_app
from app.services.file_service import FileService  # –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ======================
load_dotenv(Path(__file__).parent.parent / '.env')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8080/api')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
flask_app = create_app()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================
def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        logger.error(f"IP detection error: {str(e)}")
        return "localhost"
    
def get_frontend_url():
    ip = get_local_ip()
    port = os.getenv("FRONTEND_PORT", "3000")  # –ü–æ—Ä—Ç –∏–∑ .env –∏–ª–∏ 3000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return f"http://{ip}:{port}"

def ensure_flask_context(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not has_app_context():
            with flask_app.app_context():
                return await func(update, context)
        return await func(update, context)
    return wrapper

def get_upload_folder():
    return current_app.config['UPLOAD_FOLDER']

# ======================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    frontend_url = get_frontend_url()
    
    message = (
        "üåê *–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:*\n"
        f"[{frontend_url}]({frontend_url})\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/save —Ç–µ–∫—Å—Ç` - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ `/history` - –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    )

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

@ensure_flask_context
async def save_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = ' '.join(context.args).strip()
        if not text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /save")
            return

        response = requests.post(
            f"{API_BASE_URL}/save_text",
            json={"text": text},
            timeout=5
        )

        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

    except Exception as e:
        logger.error(f"Save error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@ensure_flask_context
async def get_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{API_BASE_URL}/history", timeout=5)
        if response.status_code != 200:
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

        history = response.json()
        if not history:
            return await update.message.reply_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

        for item in history:
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download:{item['filename']}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{item['filename']}")
                ],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy:{item['filename']}")]
            ])
            
            await update.message.reply_text(
                f"üìÑ *{item['filename']}*\n`{item['content']}`",
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"History error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ê–ô–õ–û–í –ò –ö–ù–û–ü–û–ö
# ======================
@ensure_flask_context
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if update.message.sticker:
            file = await update.message.sticker.get_file()
            ext = '.webp'  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ WEBP
            if update.message.sticker.is_animated:
                ext = '.tgs'  # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
            elif update.message.sticker.is_video:
                ext = '.webm'  # –í–∏–¥–µ–æ—Å—Ç–∏–∫–µ—Ä—ã
            filename = f"sticker_{update.message.message_id}{ext}"
        else:
            file = await update.message.effective_attachment.get_file()
            filename = FileService.sanitize_filename(update.message.effective_attachment.file_name)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_bytes = await file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        response = requests.post(
            f"{API_BASE_URL}/files/upload",
            files={'file': (filename, file_bytes)},
            timeout=20
        )
        
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –°—Ç–∏–∫–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ò–º—è: {filename}" 
                                          if update.message.sticker 
                                          else f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ò–º—è: {filename}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

    except Exception as e:
        logger.error(f"File upload error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

@ensure_flask_context
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        action, filename = query.data.split(':')
        filename = FileService.sanitize_filename(filename)
        upload_folder = get_upload_folder()
        filepath = Path(upload_folder) / filename

        if action == 'download':
            if not filepath.exists():
                return await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            await query.message.reply_document(
                document=open(filepath, 'rb'),
                caption=f"üì• {filename}"
            )

        elif action == 'delete':
            response = requests.delete(f"{API_BASE_URL}/files/delete/{filename}")
            if response.status_code == 200:
                await query.message.edit_text(f"üóë –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}")
            else:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

        elif action == 'copy':
            response = requests.get(f"{API_BASE_URL}/files/content/{filename}")
            if response.status_code != 200:
                return await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            content = response.json().get('content', '')
            # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            if os.name == 'posix':
                os.system(f'echo "{content}" | xclip -selection clipboard')
            else:
                os.system(f'echo {content} | clip')
            
            await query.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")

    except Exception as e:
        logger.error(f"Button error: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================
def run_bot():
    with flask_app.app_context():
        test_files = FileService.get_history_files()
        logger.info(f"Test history files: {test_files}")
        logger.info(f"Upload folder: {current_app.config['UPLOAD_FOLDER']}")
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π event loop"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("help", start),
            CommandHandler("save", save_text),
            CommandHandler("history", get_history),
            MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.Sticker.ALL, handle_file),
            CallbackQueryHandler(button_handler)
        ]
        
        application.add_handlers(handlers)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º event loop")
        application.run_polling(
            drop_pending_updates=True,
            close_loop=False  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_bot: {str(e)}")
        raise

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ asyncio –¥–ª—è Windows
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            
        bot_thread = Thread(
            target=run_bot,
            daemon=True,
            name="TelegramBotThread"
        )
        bot_thread.start()
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–±–µ–∑ Flask)
    run_bot()